{"version":3,"sources":["../src/main.ts","../src/types.ts","../src/output.ts","../src/reviews.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport fs from \"fs\";\n\nimport { program } from \"@commander-js/extra-typings\";\n\nimport { writeTabDelimitedText } from \"./output\";\nimport { fetchAllReviews } from \"./reviews\";\n\nprogram\n  .name(\"app-store-reviews\")\n  .description(\"Download Apple App Store reviews as tab-delimited text\")\n  .arguments(\"app-id...\")\n  .action(async (ids) => {\n    for (const id of ids) {\n      const filename = `${id}.txt`;\n      await writeTabDelimitedText(\n        fetchAllReviews(id),\n        fs.createWriteStream(filename),\n      );\n      console.log(\"Wrote\", filename);\n    }\n  });\n\nprogram.parse();\n","export const FIELD_NAMES = [\n  \"id\",\n  \"rating\",\n  \"version\",\n  \"updated\",\n  \"author\",\n  \"title\",\n  \"content\",\n] as const;\n\nexport type FieldName = (typeof FIELD_NAMES)[number];\n\nexport type Review = Partial<Record<FieldName, string>>;\n","import { Writable } from \"stream\";\n\nimport { FIELD_NAMES, Review } from \"./types\";\n\nexport const writeTabDelimitedText = async (\n  entries: AsyncGenerator<Review>,\n  stream: Writable = process.stdout,\n) => {\n  stream.write(FIELD_NAMES.join(\"\\t\"));\n  stream.write(\"\\n\");\n\n  for await (const entry of entries) {\n    const fields = FIELD_NAMES.map(\n      (key) => entry[key]?.replaceAll(/[\\n\\r]+/g, \" \") ?? \"\",\n    );\n    stream.write(fields.join(\"\\t\"));\n    stream.write(\"\\n\");\n  }\n\n  stream.end();\n};\n","import { Review } from \"./types\";\n\nexport const fetchAllReviews = async function* (\n  id: string,\n): AsyncGenerator<Review> {\n  for (let page = 1; page <= 10; page++) {\n    yield* fetchReviews(id, page);\n  }\n};\n\nconst fetchReviews = async function* (\n  id: string,\n  page: number,\n): AsyncGenerator<Review> {\n  const response = await fetch(\n    `https://itunes.apple.com/us/rss/customerreviews/page=${page}/id=${id}/json`,\n  );\n\n  if (!response.ok) {\n    throw new Error(`Received HTTP status ${response.status}`);\n  }\n\n  const json = await response.json();\n  yield* extractReviews(json);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst extractReviews = function* (json: any): Generator<Review> {\n  const entries = json.feed.entry;\n  if (entries === undefined) {\n    return;\n  }\n\n  for (const entry of entries) {\n    yield {\n      id: entry.id?.label,\n      author: entry.author?.name?.label,\n      title: entry.title?.label,\n      content: entry.content?.label,\n      rating: entry[\"im:rating\"]?.label,\n      version: entry[\"im:version\"]?.label,\n      updated: entry.updated?.label,\n    } as Review;\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,gBAAe;AAEf,2BAAwB;;;ACJjB,IAAM,cAAc;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;ACJO,IAAM,wBAAwB,OACnC,SACA,SAAmB,QAAQ,WACxB;AACH,SAAO,MAAM,YAAY,KAAK,GAAI,CAAC;AACnC,SAAO,MAAM,IAAI;AAEjB,mBAAiB,SAAS,SAAS;AACjC,UAAM,SAAS,YAAY;AAAA,MACzB,CAAC,QAAQ,MAAM,GAAG,GAAG,WAAW,YAAY,GAAG,KAAK;AAAA,IACtD;AACA,WAAO,MAAM,OAAO,KAAK,GAAI,CAAC;AAC9B,WAAO,MAAM,IAAI;AAAA,EACnB;AAEA,SAAO,IAAI;AACb;;;AClBO,IAAM,kBAAkB,iBAC7B,IACwB;AACxB,WAAS,OAAO,GAAG,QAAQ,IAAI,QAAQ;AACrC,WAAO,aAAa,IAAI,IAAI;AAAA,EAC9B;AACF;AAEA,IAAM,eAAe,iBACnB,IACA,MACwB;AACxB,QAAM,WAAW,MAAM;AAAA,IACrB,wDAAwD,IAAI,OAAO,EAAE;AAAA,EACvE;AAEA,MAAI,CAAC,SAAS,IAAI;AAChB,UAAM,IAAI,MAAM,wBAAwB,SAAS,MAAM,EAAE;AAAA,EAC3D;AAEA,QAAM,OAAO,MAAM,SAAS,KAAK;AACjC,SAAO,eAAe,IAAI;AAC5B;AAGA,IAAM,iBAAiB,WAAW,MAA8B;AAC9D,QAAM,UAAU,KAAK,KAAK;AAC1B,MAAI,YAAY,QAAW;AACzB;AAAA,EACF;AAEA,aAAW,SAAS,SAAS;AAC3B,UAAM;AAAA,MACJ,IAAI,MAAM,IAAI;AAAA,MACd,QAAQ,MAAM,QAAQ,MAAM;AAAA,MAC5B,OAAO,MAAM,OAAO;AAAA,MACpB,SAAS,MAAM,SAAS;AAAA,MACxB,QAAQ,MAAM,WAAW,GAAG;AAAA,MAC5B,SAAS,MAAM,YAAY,GAAG;AAAA,MAC9B,SAAS,MAAM,SAAS;AAAA,IAC1B;AAAA,EACF;AACF;;;AHnCA,6BACG,KAAK,mBAAmB,EACxB,YAAY,wDAAwD,EACpE,UAAU,WAAW,EACrB,OAAO,OAAO,QAAQ;AACrB,aAAW,MAAM,KAAK;AACpB,UAAM,WAAW,GAAG,EAAE;AACtB,UAAM;AAAA,MACJ,gBAAgB,EAAE;AAAA,MAClB,UAAAA,QAAG,kBAAkB,QAAQ;AAAA,IAC/B;AACA,YAAQ,IAAI,SAAS,QAAQ;AAAA,EAC/B;AACF,CAAC;AAEH,6BAAQ,MAAM;","names":["fs"]}